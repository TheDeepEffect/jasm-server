/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "./../../node_modules/.prisma/client/index"
import type { Context } from "./../types"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Comment: prisma.Comment;
  Follow: prisma.Follow;
  InvalidUser: { // root type
    message: string; // String!
  }
  Like: prisma.Like;
  Mutation: {};
  Post: prisma.Post;
  Query: {};
  User: prisma.User;
  UserAlreadyExists: { // root type
    message: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  LoginResult: NexusGenRootTypes['AuthPayload'] | NexusGenRootTypes['InvalidUser'];
  SignupResult: NexusGenRootTypes['AuthPayload'] | NexusGenRootTypes['UserAlreadyExists'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // field return type
    content: string | null; // String
    id: string | null; // ID
    post: NexusGenRootTypes['Post'] | null; // Post
    user: NexusGenRootTypes['User'] | null; // User
  }
  Follow: { // field return type
    followByUser: NexusGenRootTypes['User'] | null; // User
    followToUser: NexusGenRootTypes['User'] | null; // User
    id: string | null; // ID
  }
  InvalidUser: { // field return type
    message: string; // String!
  }
  Like: { // field return type
    id: string | null; // ID
    post: NexusGenRootTypes['Post'] | null; // Post
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['LoginResult'] | null; // LoginResult
    signup: NexusGenRootTypes['SignupResult'] | null; // SignupResult
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: string | null; // ID
    likes: Array<NexusGenRootTypes['Like'] | null> | null; // [Like]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    url: string | null; // String
  }
  Query: { // field return type
    feed: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    post: NexusGenRootTypes['Post'] | null; // Post
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    id: string | null; // ID
    likes: Array<NexusGenRootTypes['Like'] | null> | null; // [Like]
    name: string | null; // String
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    username: string | null; // String
  }
  UserAlreadyExists: { // field return type
    message: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    user: 'User'
  }
  Comment: { // field return type name
    content: 'String'
    id: 'ID'
    post: 'Post'
    user: 'User'
  }
  Follow: { // field return type name
    followByUser: 'User'
    followToUser: 'User'
    id: 'ID'
  }
  InvalidUser: { // field return type name
    message: 'String'
  }
  Like: { // field return type name
    id: 'ID'
    post: 'Post'
    user: 'User'
  }
  Mutation: { // field return type name
    login: 'LoginResult'
    signup: 'SignupResult'
  }
  Post: { // field return type name
    author: 'User'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    likes: 'Like'
    updatedAt: 'DateTime'
    url: 'String'
  }
  Query: { // field return type name
    feed: 'Post'
    post: 'Post'
    users: 'User'
  }
  User: { // field return type name
    comments: 'Comment'
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    likes: 'Like'
    name: 'String'
    posts: 'Post'
    username: 'String'
  }
  UserAlreadyExists: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    signup: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    post: { // args
      id: string; // String!
    }
    users: { // args
      filter?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  LoginResult: "AuthPayload" | "InvalidUser"
  SignupResult: "AuthPayload" | "UserAlreadyExists"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "LoginResult" | "SignupResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}